// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.17929
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace PicklesDoc.Pickles.Example.xUnit.Features._032FeatureContext
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class FeatureContextFeaturesFeature : Xunit.IUseFixture<FeatureContextFeaturesFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "FeatureContextFeatures.feature"
#line hidden
        
        public FeatureContextFeaturesFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "FeatureContext features", "In order to show how to use FeatureContext\r\nAs a SpecFlow evangelist\r\nI want to w" +
                    "rite some simple scenarios with data in FeatureContext", ProgrammingLanguage.CSharp, new string[] {
                        "showUpInScenarioInfo",
                        "andThisToo"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void SetFixture(FeatureContextFeaturesFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "FeatureContext features")]
        [Xunit.TraitAttribute("Description", "Store and retrive Person Marcus from FeatureContext Current")]
        public virtual void StoreAndRetrivePersonMarcusFromFeatureContextCurrent()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Store and retrive Person Marcus from FeatureContext Current", ((string[])(null)));
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.When("I store a person called Marcus in the current FeatureContext", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 9
 testRunner.Then("a person called Marcus can easily be retrieved from the current FeatureContext", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "FeatureContext features")]
        [Xunit.TraitAttribute("Description", "Showing information of the feature")]
        public virtual void ShowingInformationOfTheFeature()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Showing information of the feature", ((string[])(null)));
#line 11
this.ScenarioSetup(scenarioInfo);
#line 12
 testRunner.When("I execute any scenario in the feature", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table1.AddRow(new string[] {
                        "Tags",
                        "showUpInScenarioInfo, andThisToo"});
            table1.AddRow(new string[] {
                        "Title",
                        "FeatureContext features"});
            table1.AddRow(new string[] {
                        "TargetLanguage",
                        "CSharp"});
            table1.AddRow(new string[] {
                        "Language",
                        "en-US"});
            table1.AddRow(new string[] {
                        "Description",
                        "In order to"});
#line 13
 testRunner.Then("the FeatureInfo contains the following information", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                FeatureContextFeaturesFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                FeatureContextFeaturesFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
